#!/usr/bin/env python3

'''
1. Save it as go_to_goal.py in a ROS package.
2. Make it executable:
		chmod +x go_to_goal.py
3. Launch Dingo simulation or bringup (ensuring /odom and /cmd_vel are active).
4. Run script:
		rosrun your_package_name go_to_goal.py _goal_x:=2.0 _goal_y:=1.5
5. Don't forget the RIGHT-HAND RULE
'''

import rospy
import math
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion

class GoToGoal:
    def __init__(self):
        rospy.init_node('dingo_go_to_goal')
        
        # Target goal
        self.goal_x = rospy.get_param("~goal_x", 2.0)
        self.goal_y = rospy.get_param("~goal_y", 2.0)
        
        # Robot state
        self.x = 0.0
        self.y = 0.0
        self.yaw = 0.0
        
        # Control parameters
        self.linear_speed = 0.3
        self.angular_speed = 0.8
        self.distance_tolerance = 0.1
        
        self.cmd_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.odom_sub = rospy.Subscriber('/odom', Odometry, self.odom_callback)

        rospy.loginfo("Moving Dingo to (%.2f, %.2f)", self.goal_x, self.goal_y)
        self.control_loop()

    def odom_callback(self, msg):
        self.x = msg.pose.pose.position.x
        self.y = msg.pose.pose.position.y
        
        orientation_q = msg.pose.pose.orientation
        _, _, self.yaw = euler_from_quaternion([
            orientation_q.x,
            orientation_q.y,
            orientation_q.z,
            orientation_q.w
        ])

    def control_loop(self):
        rate = rospy.Rate(10)  # 10 Hz
        vel_msg = Twist()

        while not rospy.is_shutdown():
            # Distance and angle to goal
            dx = self.goal_x - self.x
            dy = self.goal_y - self.y
            distance = math.sqrt(dx**2 + dy**2)
            target_angle = math.atan2(dy, dx)
            angle_diff = self.normalize_angle(target_angle - self.yaw)

            if distance > self.distance_tolerance:
                # Angular correction
                if abs(angle_diff) > 0.1:
                    vel_msg.linear.x = 0.0
                    vel_msg.angular.z = self.angular_speed * angle_diff
                else:
                    vel_msg.linear.x = self.linear_speed
                    vel_msg.angular.z = self.angular_speed * angle_diff
            else:
                rospy.loginfo("Reached goal!")
                vel_msg.linear.x = 0.0
                vel_msg.angular.z = 0.0
                self.cmd_pub.publish(vel_msg)
                break

            self.cmd_pub.publish(vel_msg)
            rate.sleep()

    def normalize_angle(self, angle):
        """Normalize angle to [-pi, pi]."""
        while angle > math.pi:
            angle -= 2 * math.pi
        while angle < -math.pi:
            angle += 2 * math.pi
        return angle

if __name__ == '__main__':
    try:
        GoToGoal()
    except rospy.ROSInterruptException:
        pass
